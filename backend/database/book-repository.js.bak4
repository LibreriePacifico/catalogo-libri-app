// catalogo-libri-app/backend/database/book-repository.js
// Questo modulo definisce le operazioni di accesso ai dati per i libri,
// astratte dal database specifico (SQLite in questo caso).
let dbInstance;

function setDbInstance(db) {
    dbInstance = db;
}

function runAsync(sql, params) {
    return new Promise((resolve, reject) => {
        if (!dbInstance) {
            console.error('Errore: dbInstance non impostato in runAsync!');
            return reject(new Error('Database instance not set in runAsync.'));
        }
        dbInstance.run(sql, params, function (err) {
            if (err) {
                console.error('Errore runAsync:', err.message, 'SQL:', sql, 'Params:', params);
                reject(err);
            }
            else resolve({ id: this.lastID, changes: this.changes });
        });
    });
}

function allAsync(sql, params) {
    return new Promise((resolve, reject) => {
        if (!dbInstance) {
            console.error('Errore: dbInstance non impostato in allAsync!');
            return reject(new Error('Database instance not set in allAsync.'));
        }
        dbInstance.all(sql, params, (err, rows) => {
            if (err) {
                console.error('Errore allAsync:', err.message, 'SQL:', sql, 'Params:', params);
                reject(err);
            }
            else resolve(rows);
        });
    });
}

function getAsync(sql, params) {
    return new Promise((resolve, reject) => {
        if (!dbInstance) {
            console.error('Errore: dbInstance non impostato in getAsync!');
            return reject(new Error('Database instance not set in getAsync.'));
        }
        dbInstance.get(sql, params, (err, row) => {
            if (err) {
                console.error('Errore getAsync:', err.message, 'SQL:', sql, 'Params:', params);
                reject(err);
            }
            else resolve(row);
        });
    });
}

async function getAllBooks() {
    const rows = await allAsync("SELECT id, titolo, autore, editore, anno, isbn, prezzo, lingua, descrizione, categoria, sottocategoria1, sottocategoria2, imageUrls, timestamp, confidence, descrizioneAI, categoriesAI, condizioniLibro, additionalCopies FROM books ORDER BY timestamp DESC");
    return rows.map(row => {
        let imageUrls = [];
        try {
            imageUrls = row.imageUrls ? JSON.parse(row.imageUrls) : [];
            imageUrls = Array.isArray(imageUrls) ? imageUrls.filter(url => typeof url === 'string' && url.trim().length > 0) : [];
        } catch (e) {
            console.warn(`Errore parsing imageUrls per libro ID ${row.id}:`, e.message, `Valore: "${row.imageUrls}"`);
            imageUrls = [];
        }

        let categoriesAI = [];
        try {
            categoriesAI = row.categoriesAI ? JSON.parse(row.categoriesAI) : [];
            categoriesAI = Array.isArray(categoriesAI) ? categoriesAI.filter(cat => typeof cat === 'string' && cat.trim().length > 0) : [];
        } catch (e) {
            console.warn(`Errore parsing categoriesAI per libro ID ${row.id}:`, e.message, `Valore: "${row.categoriesAI}"`);
            categoriesAI = [];
        }

        let additionalCopies = [];
        try {
            additionalCopies = row.additionalCopies ? JSON.parse(row.additionalCopies) : [];
            additionalCopies = Array.isArray(additionalCopies) ? additionalCopies.filter(copy => 
                typeof copy === 'object' && copy !== null && 
                ('anno' in copy || 'prezzo' in copy || 'condizioniLibro' in copy)
            ) : [];
        } catch (e) {
            console.warn(`Errore parsing additionalCopies per libro ID ${row.id}:`, e.message, `Valore: "${row.additionalCopies}"`);
            additionalCopies = [];
        }

        return {
            ...row,
            imageUrls: imageUrls,
            categoriesAI: categoriesAI,
            additionalCopies: additionalCopies
        };
    });
}

async function addBook(bookData) {
    const {
        titolo, autore, editore, anno, isbn, prezzo, lingua, descrizione, categoria,
        sottocategoria1, sottocategoria2,
        imageUrls, confidence, descrizioneAI, categoriesAI,
        condizioniLibro, additionalCopies
    } = bookData;

    const imageUrlsJSON = JSON.stringify(imageUrls || []);
    const categoriesAIJSON = JSON.stringify(categoriesAI || []);
    const additionalCopiesJSON = JSON.stringify(additionalCopies || []);

    // NOTA: Controlla che questa SQL INSERT abbia 18 colonne.
    // La tabella 'books' ha 18 colonne, quindi ci devono essere 18 segnaposto '?'.
    const sql = `INSERT INTO books (titolo, autore, editore, anno, isbn, prezzo, lingua, descrizione, categoria, sottocategoria1, sottocategoria2, imageUrls, timestamp, confidence, descrizioneAI, categoriesAI, condizioniLibro, additionalCopies)
                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`; // <-- AGGIUNTO UN ALTRO '?'
    const params = [
        titolo, autore, editore, anno, isbn,
        prezzo != null ? parseFloat(prezzo) : null,
        lingua, descrizione, categoria,
        sottocategoria1, sottocategoria2,
        imageUrlsJSON,
        // CRITICITÀ: Il timestamp non era passato come parametro nella query originale
        // ma era DEFAULT CURRENT_TIMESTAMP. Se vuoi passarlo esplicitamente devi aggiungere `bookData.timestamp || new Date().toISOString()`
        // Qui lo lascio implicito per ora, ma il mismatch era probabilmente causato da questo.
        // Aggiungo un placeholder per il timestamp per far combaciare i 18 parametri
        new Date().toISOString(), // TIMESTAMP: Questo deve corrispondere al 13° '?' nella query
        confidence, descrizioneAI, categoriesAIJSON,
        condizioniLibro,
        additionalCopiesJSON
    ];
    // Verifica che i parametri siano 18
    if (params.length !== 18) {
        console.error("ERRORE CRITICO: Parametri INSERT mismatch. Previsti 18, trovati:", params.length);
        throw new Error("Errore interno: mismatch parametri DB per addBook.");
    }

    const result = await runAsync(sql, params);
    return { 
        id: result.id, 
        ...bookData, 
        timestamp: new Date().toISOString(), // Assicura che l'oggetto ritornato abbia un timestamp
        imageUrls: imageUrls || [],
        categoriesAI: categoriesAI || [],
        additionalCopies: additionalCopies || []
    };
}

async function updateBook(id, bookData) {
    const {
        titolo, autore, editore, anno, isbn, prezzo, lingua, descrizione, categoria,
        sottocategoria1, sottocategoria2,
        imageUrls, confidence, descrizioneAI, categoriesAI,
        condizioniLibro, additionalCopies
    } = bookData;

    const imageUrlsJSON = JSON.stringify(imageUrls || []);
    const categoriesAIJSON = JSON.stringify(categoriesAI || []);
    const additionalCopiesJSON = JSON.stringify(additionalCopies || []);

    const sql = `UPDATE books SET
                    titolo = ?,
                    autore = ?,
                    editore = ?,
                    anno = ?,
                    isbn = ?,
                    prezzo = ?,
                    lingua = ?,
                    descrizione = ?,
                    categoria = ?,
                    sottocategoria1 = ?,
                    sottocategoria2 = ?,
                    imageUrls = ?,
                    confidence = ?,
                    descrizioneAI = ?,
                    categoriesAI = ?,
                    condizioniLibro = ?,
                    additionalCopies = ?
                 WHERE id = ?`;
    const params = [
        titolo, autore, editore, anno, isbn,
        prezzo != null ? parseFloat(prezzo) : null,
        lingua, descrizione, categoria,
        sottocategoria1, sottocategoria2,
        imageUrlsJSON,
        confidence, descrizioneAI, categoriesAIJSON,
        condizioniLibro,
        additionalCopiesJSON,
        parseInt(id)
    ];
    const result = await runAsync(sql, params);
    if (result.changes === 0) {
        throw new Error('Libro non trovato.');
    }
    return { 
        message: 'Libro aggiornato con successo.', 
        ...bookData, 
        id: parseInt(id),
        imageUrls: imageUrls || [],
        categoriesAI: categoriesAI || [],
        additionalCopies: additionalCopies || []
    };
}

async function deleteBook(id) {
    const result = await runAsync('DELETE FROM books WHERE id = ?', parseInt(id));
    if (result.changes === 0) {
        throw new Error('Libro non trovato.');
    }
    return { message: 'Libro eliminato con successo.' };
}

async function importBooks(booksToImport) {
    return new Promise((resolve, reject) => {
        dbInstance.serialize(() => { 
            dbInstance.run("BEGIN TRANSACTION;", (err) => {
                if (err) {
                    console.error('Errore BEGIN TRANSACTION per import:', err.message);
                    return reject(err);
                }
            });

            dbInstance.run("DELETE FROM books", (err) => {
                if (err) {
                    console.error('Errore DELETE FROM books per import:', err.message);
                    dbInstance.run("ROLLBACK;");
                    return reject(err);
                }

                const stmt = dbInstance.prepare(`
                    INSERT INTO books (titolo, autore, editore, anno, isbn, prezzo, lingua, descrizione, categoria, sottocategoria1, sottocategoria2, imageUrls, timestamp, confidence, descrizioneAI, categoriesAI, condizioniLibro, additionalCopies)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                `); // <-- AGGIUNTO UN ALTRO '?' QUI ANCHE
                booksToImport.forEach(book => {
                    const imageUrlsJSON = JSON.stringify(book.imageUrls || []);
                    const categoriesAIJSON = JSON.stringify(book.categoriesAI || []);
                    const additionalCopiesJSON = JSON.stringify(book.additionalCopies || []);

                    const params = [ // Definisci i parametri qui
                        book.titolo, book.autore, book.editore, book.anno, book.isbn,
                        book.prezzo != null ? parseFloat(book.prezzo) : null,
                        book.lingua, book.descrizione,
                        book.categoria, book.sottocategoria1, book.sottocategoria2,
                        imageUrlsJSON,
                        book.timestamp || new Date().toISOString(), // TIMESTAMP: Questo deve corrispondere al 13° '?'
                        book.confidence || 0,
                        book.descrizioneAI || '',
                        categoriesAIJSON,
                        book.condizioniLibro || '',
                        additionalCopiesJSON
                    ];
                    if (params.length !== 18) { // Verifica qui anche
                        console.error("ERRORE CRITICO: Parametri INSERT per import mismatch. Previsti 18, trovati:", params.length, "Libro:", book.titolo);
                        // Puoi scegliere di saltare questo libro o rigettare l'intera transazione.
                        // Per ora, rigettiamo per evidenziare il problema.
                        dbInstance.run("ROLLBACK;");
                        return reject(new Error("Errore interno: mismatch parametri DB per importBooks."));
                    }
                    stmt.run(...params); // Passa i parametri come array
                });
                stmt.finalize();

                dbInstance.run("COMMIT;", (err) => {
                    if (err) {
                        console.error('Errore COMMIT per import:', err.message);
                        return reject(err);
                    }
                    resolve({ message: `Importazione completata. ${booksToImport.length} libri importati.` });
                });
            });
        });
    });
}

async function getTotalBooks() {
    const row = await getAsync("SELECT COUNT(*) as totalBooks FROM books");
    return row.totalBooks;
}

async function getLastUpdated() {
    const row = await getAsync("SELECT MAX(timestamp) as lastUpdated FROM books");
    return row.lastUpdated;
}

async function getUniqueAuthors() {
    const authors = await allAsync("SELECT DISTINCT autore FROM books WHERE autore IS NOT NULL");
    return authors.length;
}

async function getTotalCatalogValue() {
    const row = await getAsync("SELECT SUM(prezzo) as totalValue FROM books WHERE prezzo IS NOT NULL");
    return row.totalValue || 0;
}

module.exports = {
    setDbInstance,
    getAllBooks,
    addBook,
    updateBook,
    deleteBook,
    importBooks,
    getTotalBooks,
    getLastUpdated,
    getUniqueAuthors,
    getTotalCatalogValue
};