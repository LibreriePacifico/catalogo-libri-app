// catalogo-libri-app/backend/database/book-repository.js
// Questo modulo definisce le operazioni di accesso ai dati per i libri,
// astratte dal database specifico (SQLite in questo caso).
let dbInstance; // Variabile per l'istanza del database (es. sqlite3.Database, o un client PostgreSQL)

/**
 * Imposta l'istanza del database da utilizzare per le operazioni del repository.
 * Questo è un esempio di Dependency Injection per rendere il repository agnostico al DB.
 * @param {object} db - L'istanza del database connesso.
 */
function setDbInstance(db) {
    dbInstance = db;
}

// ===============================================
// FUNZIONI WRAPPER PER LE OPERAZIONI ASINCRONE DI SQLITE
// ===============================================

/**
 * Esegue una query di scrittura (INSERT, UPDATE, DELETE) e restituisce l'ID dell'ultima riga inserita
 * o il numero di righe modificate/eliminate.
 * @param {string} sql - La query SQL da eseguire.
 * @param {Array<any>} params - I parametri per la query.
 * @returns {Promise<{id: number, changes: number}>} Una Promise che si risolve con i dettagli dell'operazione.
 */
function runAsync(sql, params) {
    return new Promise((resolve, reject) => {
        if (!dbInstance) {
            console.error('Errore: dbInstance non impostato in runAsync!');
            return reject(new Error('Database instance not set in runAsync.'));
        }
        dbInstance.run(sql, params, function (err) {
            if (err) {
                console.error('Errore runAsync:', err.message, 'SQL:', sql, 'Params:', params);
                reject(err);
            }
            else resolve({ id: this.lastID, changes: this.changes });
        });
    });
}

/**
 * Esegue una query di lettura che restituisce tutte le righe.
 * @param {string} sql - La query SQL da eseguire.
 * @param {Array<any>} params - I parametri per la query.
 * @returns {Promise<Array<object>>} Una Promise che si risolve con un array di oggetti (righe del DB).
 */
function allAsync(sql, params) {
    return new Promise((resolve, reject) => {
        if (!dbInstance) {
            console.error('Errore: dbInstance non impostato in allAsync!');
            return reject(new Error('Database instance not set in allAsync.'));
        }
        dbInstance.all(sql, params, (err, rows) => {
            if (err) {
                console.error('Errore allAsync:', err.message, 'SQL:', sql, 'Params:', params);
                reject(err);
            }
            else resolve(rows);
        });
    });
}

/**
 * Esegue una query di lettura che restituisce una singola riga.
 * @param {string} sql - La query SQL da eseguire.
 * @param {Array<any>} params - I parametri per la query.
 * @returns {Promise<object | undefined>} Una Promise che si risolve con un oggetto (la riga del DB) o undefined.
 */
function getAsync(sql, params) {
    return new Promise((resolve, reject) => {
        if (!dbInstance) {
            console.error('Errore: dbInstance non impostato in getAsync!');
            return reject(new Error('Database instance not set in getAsync.'));
        }
        dbInstance.get(sql, params, (err, row) => {
            if (err) {
                console.error('Errore getAsync:', err.message, 'SQL:', sql, 'Params:', params);
                reject(err);
            }
            else resolve(row);
        });
    });
}

// ===============================================
// OPERAZIONI CRUD SUI LIBRI (ASTRATTE DAL DB SOTTOSTANTE)
// ===============================================

/**
 * Recupera tutti i libri dal database.
 * Include una gestione più robusta del parsing JSON per i campi testuali che contengono JSON.
 * @returns {Promise<Array<object>>} Una Promise che si risolve con un array di oggetti libro.
 */
async function getAllBooks() {
    const rows = await allAsync("SELECT id, titolo, autore, editore, anno, isbn, prezzo, lingua, descrizione, categoria, sottocategoria1, sottocategoria2, imageUrls, timestamp, confidence, descrizioneAI, categoriesAI, condizioniLibro, additionalCopies FROM books ORDER BY timestamp DESC");
    return rows.map(row => {
        let imageUrls = [];
        try {
            imageUrls = row.imageUrls ? JSON.parse(row.imageUrls) : [];
            imageUrls = Array.isArray(imageUrls) ? imageUrls.filter(url => typeof url === 'string' && url.trim().length > 0) : [];
        } catch (e) {
            console.warn(`Errore parsing imageUrls per libro ID ${row.id}:`, e.message, `Valore: "${row.imageUrls}"`);
            imageUrls = [];
        }

        let categoriesAI = [];
        try {
            categoriesAI = row.categoriesAI ? JSON.parse(row.categoriesAI) : [];
            categoriesAI = Array.isArray(categoriesAI) ? categoriesAI.filter(cat => typeof cat === 'string' && cat.trim().length > 0) : [];
        } catch (e) {
            console.warn(`Errore parsing categoriesAI per libro ID ${row.id}:`, e.message, `Valore: "${row.categoriesAI}"`);
            categoriesAI = [];
        }

        let additionalCopies = [];
        try {
            additionalCopies = row.additionalCopies ? JSON.parse(row.additionalCopies) : [];
            additionalCopies = Array.isArray(additionalCopies) ? additionalCopies.filter(copy => 
                typeof copy === 'object' && copy !== null && 
                ('anno' in copy || 'prezzo' in copy || 'condizioniLibro' in copy)
            ) : [];
        } catch (e) {
            console.warn(`Errore parsing additionalCopies per libro ID ${row.id}:`, e.message, `Valore: "${row.additionalCopies}"`);
            additionalCopies = [];
        }

        return {
            ...row,
            imageUrls: imageUrls,
            categoriesAI: categoriesAI,
            additionalCopies: additionalCopies
        };
    });
}

/**
 * Aggiunge un nuovo libro al database.
 * @param {object} bookData - I dati del libro da aggiungere.
 * @returns {Promise<object>} Una Promise che si risolve con il libro aggiunto (incluso l'ID).
 */
async function addBook(bookData) {
    const {
        titolo, autore, editore, anno, isbn, prezzo, lingua, descrizione, categoria,
        sottocategoria1, sottocategoria2,
        imageUrls, confidence, descrizioneAI, categoriesAI,
        condizioniLibro, additionalCopies
    } = bookData;

    const imageUrlsJSON = JSON.stringify(imageUrls || []);
    const categoriesAIJSON = JSON.stringify(categoriesAI || []);
    const additionalCopiesJSON = JSON.stringify(additionalCopies || []);

    const sql = `INSERT INTO books (titolo, autore, editore, anno, isbn, prezzo, lingua, descrizione, categoria, sottocategoria1, sottocategoria2, imageUrls, confidence, descrizioneAI, categoriesAI, condizioniLibro, additionalCopies)
                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;
    const params = [
        titolo, autore, editore, anno, isbn,
        prezzo != null ? parseFloat(prezzo) : null,
        lingua, descrizione, categoria,
        sottocategoria1, sottocategoria2,
        imageUrlsJSON,
        confidence, descrizioneAI, categoriesAIJSON,
        condizioniLibro,
        additionalCopiesJSON
    ];
    const result = await runAsync(sql, params);
    return { 
        id: result.id, 
        ...bookData, 
        timestamp: new Date().toISOString(),
        imageUrls: imageUrls || [],
        categoriesAI: categoriesAI || [],
        additionalCopies: additionalCopies || []
    };
}

/**
 * Aggiorna un libro esistente nel database.
 * @param {number} id - L'ID del libro da aggiornare.
 * @param {object} bookData - I dati del libro aggiornati.
 * @returns {Promise<object>} Una Promise che si risolve con il libro aggiornato.
 * @throws {Error} Se il libro non viene trovato.
 */
async function updateBook(id, bookData) {
    const {
        titolo, autore, editore, anno, isbn, prezzo, lingua, descrizione, categoria,
        sottocategoria1, sottocategoria2,
        imageUrls, confidence, descrizioneAI, categoriesAI,
        condizioniLibro, additionalCopies
    } = bookData;

    const imageUrlsJSON = JSON.stringify(imageUrls || []);
    const categoriesAIJSON = JSON.stringify(categoriesAI || []);
    const additionalCopiesJSON = JSON.stringify(additionalCopies || []);

    const sql = `UPDATE books SET
                    titolo = ?,
                    autore = ?,
                    editore = ?,
                    anno = ?,
                    isbn = ?,
                    prezzo = ?,
                    lingua = ?,
                    descrizione = ?,
                    categoria = ?,
                    sottocategoria1 = ?,
                    sottocategoria2 = ?,
                    imageUrls = ?,
                    confidence = ?,
                    descrizioneAI = ?,
                    categoriesAI = ?,
                    condizioniLibro = ?,
                    additionalCopies = ?
                 WHERE id = ?`;
    // Assicurati che l'ID sia un numero intero per la query SQL
    const params = [
        titolo, autore, editore, anno, isbn,
        prezzo != null ? parseFloat(prezzo) : null,
        lingua, descrizione, categoria,
        sottocategoria1, sottocategoria2,
        imageUrlsJSON,
        confidence, descrizioneAI, categoriesAIJSON,
        condizioniLibro,
        additionalCopiesJSON,
        parseInt(id) // Converti l'ID a numero intero qui
    ];
    const result = await runAsync(sql, params);
    if (result.changes === 0) {
        throw new Error('Libro non trovato.');
    }
    return { 
        message: 'Libro aggiornato con successo.', 
        ...bookData, 
        id: parseInt(id),
        imageUrls: imageUrls || [],
        categoriesAI: categoriesAI || [],
        additionalCopies: additionalCopies || []
    };
}

/**
 * Elimina un libro dal database.
 * @param {number} id - L'ID del libro da eliminare.
 * @returns {Promise<object>} Una Promise che si risolve con un messaggio di successo.
 * @throws {Error} Se il libro non viene trovato.
 */
async function deleteBook(id) {
    // Assicurati che l'ID sia un numero intero per la query SQL
    const result = await runAsync('DELETE FROM books WHERE id = ?', parseInt(id));
    if (result.changes === 0) {
        throw new Error('Libro non trovato.');
    }
    return { message: 'Libro eliminato con successo.' };
}

// ===============================================
// OPERAZIONI SPECIFICHE PER IMPORT/EXPORT E STATISTICHE
// ===============================================

/**
 * Importa un array di libri nel database, svuotando prima la tabella.
 * Gestisce la transazione.
 * @param {Array<object>} booksToImport - L'array di libri da importare.
 * @returns {Promise<object>} Una Promise che si risolve con un messaggio di successo.
 * @throws {Error} Se l'importazione fallisce.
 */
async function importBooks(booksToImport) {
    return new Promise((resolve, reject) => {
        // La serie di run garantisce che le operazioni siano sequenziali
        dbInstance.serialize(() => { 
            dbInstance.run("BEGIN TRANSACTION;", (err) => {
                if (err) {
                    console.error('Errore BEGIN TRANSACTION per import:', err.message);
                    return reject(err);
                }
            });

            dbInstance.run("DELETE FROM books", (err) => {
                if (err) {
                    console.error('Errore DELETE FROM books per import:', err.message);
                    dbInstance.run("ROLLBACK;");
                    return reject(err);
                }

                const stmt = dbInstance.prepare(`
                    INSERT INTO books (titolo, autore, editore, anno, isbn, prezzo, lingua, descrizione, categoria, sottocategoria1, sottocategoria2, imageUrls, timestamp, confidence, descrizioneAI, categoriesAI, condizioniLibro, additionalCopies)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                `);
                booksToImport.forEach(book => {
                    // Assicurati che i dati siano stringificati correttamente prima di inserirli
                    const imageUrlsJSON = JSON.stringify(book.imageUrls || []);
                    const categoriesAIJSON = JSON.stringify(book.categoriesAI || []);
                    const additionalCopiesJSON = JSON.stringify(book.additionalCopies || []);

                    stmt.run(
                        book.titolo, book.autore, book.editore, book.anno, book.isbn,
                        book.prezzo != null ? parseFloat(book.prezzo) : null,
                        book.lingua, book.descrizione,
                        book.categoria, book.sottocategoria1, book.sottocategoria2,
                        imageUrlsJSON,
                        book.timestamp || new Date().toISOString(),
                        book.confidence || 0,
                        book.descrizioneAI || '',
                        categoriesAIJSON,
                        book.condizioniLibro || '',
                        additionalCopiesJSON
                    );
                });
                stmt.finalize();

                dbInstance.run("COMMIT;", (err) => {
                    if (err) {
                        console.error('Errore COMMIT per import:', err.message);
                        return reject(err);
                    }
                    resolve({ message: `Importazione completata. ${booksToImport.length} libri importati.` });
                });
            });
        });
    });
}

// Operazioni per Statistiche
async function getTotalBooks() {
    const row = await getAsync("SELECT COUNT(*) as totalBooks FROM books");
    return row.totalBooks;
}

async function getLastUpdated() {
    const row = await getAsync("SELECT MAX(timestamp) as lastUpdated FROM books");
    return row.lastUpdated;
}

async function getUniqueAuthors() {
    const authors = await allAsync("SELECT DISTINCT autore FROM books WHERE autore IS NOT NULL");
    return authors.length;
}

async function getTotalCatalogValue() {
    const row = await getAsync("SELECT SUM(prezzo) as totalValue FROM books WHERE prezzo IS NOT NULL");
    return row.totalValue || 0;
}


module.exports = {
    setDbInstance,
    getAllBooks,
    addBook,
    updateBook,
    deleteBook,
    importBooks,
    getTotalBooks,
    getLastUpdated,
    getUniqueAuthors,
    getTotalCatalogValue
};